<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd" default-autowire="byName">

    <!-- 注解扫描 -->
    <context:component-scan base-package="wz.service"/>

    <!--    数据源封装  -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="jdbc:mysql://localhost:3306/guitar?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="1226568176"/>
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    </bean>
    <!--    创建 SqlSessionFactory 对象 -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="factory">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 扫描器相当于 mybatis.xml 中 mappers 下 package 标签,扫描 com.bjsxt.mapper 包后会给对应接口创建对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 要扫描的包 -->
        <property name="basePackage" value="wz.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="factory"/>
    </bean>

    <!--    AOP-->
    <bean class="wz.advice.AdminLoginAfterAdvice" id="adminLoginAfterAdvice"/>
    <bean class="wz.advice.DataAfterAdvice" id="dataAfterAdvice"/>
    <bean class="wz.advice.UserLoginAfterAdvice" id="loginAfterAdvice"/>
    <bean class="wz.advice.UserModifyAfterAdvice" id="userModifyAfterAdvice"/>
    <bean class="wz.advice.UserRegAfterAdvice" id="userRegAfterAdvice"/>
    <bean class="wz.advice.MessageAddAfterAdvice" id="messageAddAfterAdvice"/>

    <aop:config>
        <aop:pointcut id="adminLogin" expression="execution(* wz.service.AdminService.login(..))"/>
        <aop:advisor advice-ref="adminLoginAfterAdvice" pointcut-ref="adminLogin"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="data" expression="execution(* wz.service.*.*(..))"/>
        <aop:advisor advice-ref="dataAfterAdvice" pointcut-ref="data"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="userLogin" expression="execution(* wz.service.UsersService.UserLogin(..)))"/>
        <aop:advisor advice-ref="loginAfterAdvice" pointcut-ref="userLogin"/>
    </aop:config>
    <aop:config>
        <aop:pointcut id="userReg" expression="execution(* wz.service.UsersService.insUsers(..))"/>
        <aop:advisor advice-ref="userRegAfterAdvice" pointcut-ref="userReg"/>
    </aop:config>
    <aop:config>
        <aop:pointcut id="userModify" expression="execution(* wz.service.UsersService.updUser(..))"/>
        <aop:advisor advice-ref="userModifyAfterAdvice" pointcut-ref="userModify"/>
    </aop:config>
    <aop:config>
        <aop:pointcut id="messAdd" expression="execution(* wz.service.MessageService.insMessage(..))"/>
        <aop:advisor advice-ref="messageAddAfterAdvice" pointcut-ref="messAdd"/>
    </aop:config>




</beans>